{"version":3,"sources":["AddTaskField.js","Task.js","Todo.js","serviceWorker.js","index.js"],"names":["AddTaskField","props","handleChange","bind","handleClick","handleKeyDown","event","this","onChange","target","value","onClick","e","key","className","type","placeholder","onKeyDown","id","React","Component","Task","handleClickOnCheckbox","handleTaskTextChange","handleDeleteClick","onClickCheckbox","onChangeText","onDeleteClick","text","done","checked","disabled","ToDo","state","newTaskText","tasks","JSON","parse","localStorage","getItem","handleNewTaskText","handleNewTaskAdd","handleCheckBoxClick","handleTaskDeleteClick","setItem","stringify","setState","tasksID","map","newID","length","Math","max","saveToLocalStorage","taskIndex","indexOf","newTasks","console","log","splice","task","Boolean","window","location","hostname","match","ReactDOM","render","Todo","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d0c9006.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass AddTaskField extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleClick = this.handleClick.bind(this)\r\n    this.handleKeyDown = this.handleKeyDown.bind(this)\r\n  }\r\n\r\n  handleChange(event){\r\n    this.props.onChange(event.target.value)\r\n  }\r\n\r\n  handleClick(){\r\n    this.props.onClick()\r\n  }\r\n\r\n  handleKeyDown(e){\r\n    if(e.key === 'Enter'){\r\n      this.props.onClick()\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const {value} = this.props\r\n    return (\r\n      <div className=\"input-group mb-3\">\r\n        <input \r\n          type=\"text\" \r\n          className=\"form-control\" \r\n          placeholder=\"New task\"\r\n          value={value}\r\n          onChange={this.handleChange}\r\n          onKeyDown={this.handleKeyDown}\r\n        />\r\n        <div className=\"input-group-append\" id=\"button-addon4\">\r\n          <button \r\n            className=\"btn btn-primary\" \r\n            type=\"button\"\r\n            onClick={this.handleClick}\r\n          >\r\n            Add\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddTaskField","import React from 'react'\r\n\r\nclass Task extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.handleClickOnCheckbox = this.handleClickOnCheckbox.bind(this)\r\n    this.handleTaskTextChange = this.handleTaskTextChange.bind(this)\r\n    this.handleDeleteClick = this.handleDeleteClick.bind(this)\r\n  }\r\n\r\n  handleClickOnCheckbox(){\r\n    this.props.onClickCheckbox(this.props.id)\r\n  }\r\n\r\n  handleTaskTextChange(event){\r\n    this.props.onChangeText(this.props.id, event.target.value)\r\n  }\r\n\r\n  handleDeleteClick(){\r\n    this.props.onDeleteClick(this.props.id)\r\n  }\r\n\r\n  render(){\r\n    const {text, done} = this.props\r\n    return (\r\n      <div className={\"input-group mb-3\"  + (done ? \" done\" : \" \")}>\r\n        <div className=\"input-group-prepend\">\r\n          <div className=\"input-group-text\">\r\n            <input \r\n              type=\"checkbox\" \r\n              className=\"bigcheckbox\" \r\n              checked={done}\r\n              onChange={this.handleClickOnCheckbox}\r\n            />\r\n          </div>\r\n        </div>\r\n        <input \r\n          type=\"text\" \r\n          className=\"form-control\"\r\n          value={text}\r\n          onChange={this.handleTaskTextChange}\r\n          disabled={done}\r\n        />\r\n        <div className=\"input-group-append\" id=\"button-addon4\">\r\n          <button \r\n            className=\"btn btn-danger\"\r\n            type=\"button\"\r\n            onClick={this.handleDeleteClick}\r\n          >âœ–</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Task ","import React from 'react';\nimport AddTaskField from './AddTaskField';\nimport Task from './Task'\nimport './App.css';\n\nclass ToDo extends React.Component {\n  constructor(props){\n    super(props)\n    this.state={\n      newTaskText: \"\",\n      tasks: JSON.parse(localStorage.getItem('tasks')) || [],\n    }\n    this.handleNewTaskText = this.handleNewTaskText.bind(this)\n    this.handleNewTaskAdd = this.handleNewTaskAdd.bind(this)\n    this.handleCheckBoxClick = this.handleCheckBoxClick.bind(this)\n    this.handleTaskTextChange = this.handleTaskTextChange.bind(this)\n    this.handleTaskDeleteClick = this.handleTaskDeleteClick.bind(this)\n  }\n\n  saveToLocalStorage(){\n    localStorage.setItem('tasks', JSON.stringify(this.state.tasks))\n  }\n\n  handleNewTaskText(value){\n    this.setState({\n      newTaskText: value\n    })\n  }\n\n  handleNewTaskAdd(){\n    const {tasks, newTaskText} = this.state\n    if(!newTaskText) return\n    const tasksID = tasks.map(value => value.id)\n    const newID = tasksID.length ? Math.max(...tasksID) + 1 : 1\n    this.setState({\n      tasks: [...tasks, {id: newID, text: newTaskText, done: false}],\n      newTaskText: \"\",\n    }, this.saveToLocalStorage)\n  }\n\n  handleCheckBoxClick(id){\n    const {tasks} = this.state\n    const taskIndex = tasks.map(value => value.id).indexOf(id)\n    let newTasks = [...tasks]\n    newTasks[taskIndex].done = !newTasks[taskIndex].done\n    this.setState({\n      tasks: newTasks\n    }, this.saveToLocalStorage)\n  }\n\n  handleTaskTextChange(id, value){\n    const {tasks} = this.state\n    const taskIndex = tasks.map(value => value.id).indexOf(id)\n    let newTasks = [...tasks]\n    newTasks[taskIndex].text = value\n    this.setState({\n      tasks: newTasks\n    }, this.saveToLocalStorage)\n  }\n\n  handleTaskDeleteClick(id){\n    const {tasks} = this.state\n    const taskIndex = tasks.map(value => value.id).indexOf(id)\n    console.log(taskIndex)\n    let newTasks = [...tasks]\n    newTasks.splice(taskIndex, 1)\n    this.setState({\n      tasks: newTasks\n    }, this.saveToLocalStorage)\n  }\n\n  render(){\n    const {tasks, newTaskText} = this.state\n    return (\n      <div className=\"container mt-4 todo\">\n        <div className=\"card px-3\">\n          <div className=\"card-body\">\n              <h4 className=\"card-title text-center\">ToDo</h4>\n              <AddTaskField\n                value={newTaskText}\n                onChange={this.handleNewTaskText}\n                onClick={this.handleNewTaskAdd}\n              />\n              <hr/>\n              {tasks.length ? \n                tasks.map(task => \n                <Task \n                  key={task.id}\n                  id={task.id}\n                  text={task.text}\n                  done={task.done}\n                  onClickCheckbox={this.handleCheckBoxClick}\n                  onChangeText={this.handleTaskTextChange}\n                  onDeleteClick={this.handleTaskDeleteClick}\n                />\n              ) :\n              <p className=\"text-center\">Empty list</p>\n              }\n          </div>\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default ToDo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todo from './Todo';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Todo />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}